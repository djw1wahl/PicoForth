D == dictionary

	:			:			:			Code>		Code>		Code>		Code>
	________	________	________	________	________	________	________
	10	A		20	B		30	C		40	SWAP	50	ROT		60	EXIT	70	~
	________	________	________	________	________	________	________
pfa		dcol		dcol		dcol		dcod		dcod		dcod		dcod
	________	________	________	________	________	________	________
+1		B			C			SWAP		_swp		_rot		_ext		_~
	________	________	________	________	________	________	________
+2		~			EXIT		ROT			_rtn		_rtn		_rtn		_rtn
	________	________	________	________	________	________	________
+3		EXIT					EXIT
	________				________
		
		
oK> A
	[Execution Sequence]
	A docolon B docolon C docolon Swap docode _swp _rtn ROT docode _rot _rtn 
	EXIT docode _ext _rtn EXIT docode _ext _rtn ~ docode _~ _rtn EXIT docode _ext _rtn
		
_rtn() 		== {  }

_ext() 		== { I = PopR }

_docolon 	== { PushR = I; I = D[Word(++pfa)]; }

_docode		== { PushR = I; I = D[Word(++pfa)]; P = PopR; D[P(pfa+i)](); }
		
	Execute(I = _find(A)) 														( - )
		I = A(pfa)() 	// call to A.docolon									I == A
			_docolon{
				PushR = I; 														( A - )
				I = D[I(++pfa)];												I == B
				D[B(pfa)](); // call to B.docolon
				_docolon{
					PushR = I; 													( A B - )
					I = D[I(++pfa)];											I == C
					D[C(pfa)](); // call to C.docolon			
					_docolon{	
						do{															1st							2nd							3rd
							PushR = I; 											( A B C - )					( A B C ROT - )				( A B C EXIT - )
							I = D[I(++pfa)];									I == SWAP					I == ROT					I == EXIT
							D[C(pfa)](); // call to SWAP.docode	then ROT.docode then EXIT.docode
							_docode{
								PushR = I; 										( A B C SWAP - )			( A B C ROT - )				( A B C - )
								I = D[I(++pfa)];								I == ROT					I == EXIT					I == C
								P = PopR										( A B C - )					( A B C - )
								for(i=0;i<number_of_primitives;i++){
									D[P(pfa+i)]();	// call to _swp,..._rtn	
									--OR--
									D[P(pfa+i)]();	// call to _rot,..._rtn	
									--OR--
									D[P(pfa+i)]();	// call to _ext,..._rtn		
									_ext
										I == PopR
								}				
							}
						}while();				
					}
				}
			}
			
			
			












